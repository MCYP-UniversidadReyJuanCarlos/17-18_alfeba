/*
 * Android Exploit Suggester
 */

package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
)

type Vuln struct {
	CVE       string
	versions  []string
	type_vuln string
	score     float32
	ref       []string
}

var vulns [10]Vuln

func automaticMode() {
	fmt.Println("Modo automatico")
	output, err := exec.Command("cat", "/system/build.prop", "|", "grep", "grep gmsversion").CombinedOutput()
	if err != nil {
		os.Stderr.WriteString(err.Error())
	}
	outputString := string(output)
	version := strings.Split(outputString, "=")[1]
	fmt.Println(version)
}

func manualMode(version string) {
	fmt.Println("Modo manual")
	fmt.Println(version)
	searchVuln(version)
}

func printVuln(v Vuln) {
	fmt.Println(v.CVE)
	fmt.Printf("\tVesion affected: ")
	for _, ver := range v.versions {
		fmt.Printf(ver + " ")
	}
	fmt.Println()
	fmt.Println("\tType: " + v.type_vuln)
	fmt.Println("\tScore: ", v.score)
	fmt.Printf("\tRef:\n")
	for _, ref := range v.ref {
		fmt.Printf("\t\t" + ref + "\n")
	}
	fmt.Println()
}

func searchVuln(version string) {
	for _, v := range vulns {
		for _, ver := range v.versions {
			if ver == version {
				printVuln(v)
			}
		}
	}
}

func printBanner() {
	fmt.Println("   _____              .___             .__    .___")
	fmt.Println("  /  _  \\   ____    __| _/______  ____ |__| __| _/")
	fmt.Println(" /  /_\\  \\ /    \\  / __ |\\_  __ \\/  _ \\|  |/ __ | ")
	fmt.Println("/    |    \\   |  \\/ /_/ | |  | \\(  <_> )  / /_/ | ")
	fmt.Println("\\____|__  /___|  /\\____ | |__|   \\____/|__\\____ | ")
	fmt.Println("        \\/     \\/      \\/                      \\/ ")
	fmt.Println("")
	fmt.Println("___________              .__         .__  __   ")
	fmt.Println("\\_   _____/__  _________ |  |   ____ |__|/  |_ ")
	fmt.Println(" |    __)_\\  \\/  /\\____ \\|  |  /  _ \\|  \\   __\\")
	fmt.Println(" |        \\>    < |  |_> >  |_(  <_> )  ||  |  ")
	fmt.Println("/_______  /__/\\_ \\|   __/|____/\\____/|__||__|")
	fmt.Println("        \\/      \\/|__|                        ")
	fmt.Println("")
	fmt.Println("  _________                                    __                ")
	fmt.Println(" /   _____/__ __  ____   ____   ____   _______/  |_  ___________ ")
	fmt.Println(" \\_____  \\|  |  \\/ ___\\ / ___\\_/ __ \\ /  ___/\\   __\\/ __ \\_  __ \\")
	fmt.Println(" /        \\  |  / /_/  > /_/  >  ___/ \\___ \\  |  | \\  ___/|  | \\/")
	fmt.Println("/_______  /____/\\___  /\\___  / \\___  >____  > |__|  \\___  >__|  ")
	fmt.Println("        \\/     /_____//_____/      \\/     \\/            \\/      ")
}

func main() {
	vulns[0] = Vuln{CVE: "CVE-2017-0845", versions: []string{"5.0", "5.0.1", "5.0.2", "5.1", "5.1.0", "5.1.1", "6.0", "6.0.1", "7.0", "7.1.0", "7.1.1", "7.1.2"},
		type_vuln: "Denial Of Service", score: 5.0, ref: []string{"https://source.android.com/security/bulletin/pixel/2017-11-01"}}
	vulns[1] = Vuln{CVE: "CVE-2017-0835", versions: []string{"6.0", "6.0.1", "7.0", "7.1.0", "7.1.1", "7.1.2", "8.0"},
		type_vuln: "Execute Code", score: 9.3, ref: []string{"http://www.securityfocus.com/bid/101717", "https://source.android.com/security/bulletin/2017-11-01"}}
	vulns[2] = Vuln{CVE: "CVE-2017-0834", versions: []string{"6.0", "6.0.1", "7.0", "7.1.0", "7.1.1", "7.1.2", "8.0"},
		type_vuln: "Execute Code", score: 9.3, ref: []string{"http://www.securityfocus.com/bid/101717", "https://source.android.com/security/bulletin/2017-11-01"}}
	vulns[3] = Vuln{CVE: "CVE-2017-0833", versions: []string{"6.0", "6.0.1", "7.0", "7.1.0", "7.1.1", "7.1.2", "8.0"},
		type_vuln: "Execute Code", score: 9.3, ref: []string{"http://www.securityfocus.com/bid/101717", "https://source.android.com/security/bulletin/2017-11-01"}}
	printBanner()
	args := os.Args[1:]
	switch len(args) {
	case 0:
		automaticMode()
		break
	case 1:
		manualMode(args[0])
		break
	default:
		fmt.Println("Usage:")
		fmt.Println("For automatic mode enter: android_exploit_suggester")
		fmt.Println("For manual mode enter: android_exploit_suggester version_of_android")
	}
}
